{
    "openapi": "3.0.2",
    "info": {
        "title": "Kapital Guild Service API",
        "description": "An API for interacting with the Kapital Guild Service",
        "version": "2.2.95"
    },
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "Main"
                ],
                "summary": "Root",
                "operationId": "root__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "Main"
                ],
                "summary": "Version",
                "operationId": "Version_version_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/login/password": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Login With Password",
                "operationId": "login_with_password_login_password_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordLogin"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthToken"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login/discord": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Login With Discord",
                "operationId": "login_with_discord_login_discord_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscordLogin"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthToken"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/discord": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create User From Discord Info",
                "description": "Creates a new user based on discord oauth information. A valid refcode\nmust be provided. If an invalid refcode is provided, a 401 is returned.\nAn authentication token is returned for the newly created user on success.\n\nArgs:\n    disc_info (schemas.NewUserDiscordInfo): Discord info used to look\n        up the user's info with the Discord API.\n\nReturns:\n    schemas.AuthToken: Bearer token for authentication.",
                "operationId": "create_user_from_discord_info_users_discord_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewUserDiscordInfo"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthToken"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login/token": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Login With Token",
                "description": "Generates a token for the user specified in the discord id model. The caller\nmust be a user eligible to generate tokens for others. Only users with the\nissuer role can generate tokens for other users. And the user having their\ntoken generated must not be a manager or admin.",
                "operationId": "login_with_token_login_token_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssuerLogin"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthToken"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Read Users",
                "operationId": "read_users_users_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Only Enabled",
                            "type": "boolean",
                            "default": true
                        },
                        "name": "only_enabled",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Username Search",
                            "type": "string"
                        },
                        "name": "username_search",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Has Scholarship",
                            "type": "boolean"
                        },
                        "name": "has_scholarship",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/RoleStr"
                            }
                        },
                        "name": "roles",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Wallet",
                            "type": "string"
                        },
                        "name": "user_wallet",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Users"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create User",
                "description": "Creates a new user.\n\nArgs:\n    user (schemas.UserCreate): User to create.\n\nReturns:\n    models.User: User that was created.",
                "operationId": "create_user_users_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/@me": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Read Me",
                "operationId": "read_me_users__me_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Read User",
                "operationId": "read_user_users__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Only Enabled",
                            "type": "boolean",
                            "default": true
                        },
                        "name": "only_enabled",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "operationId": "delete_user_users__id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Patch User",
                "description": "Patches the data of a user. Values that are not None in the payload are\nupdated to the provided values. Values that are None are left as-is.\n\nArgs:\n    id (int): Id of the user\n    user_patch (schemas.UserPatch): Object with information about how to patch the user.\n    crud (Crud, optional): Object for doing crud. Defaults to Depends(get_crud).\n    caller (models.User, optional): Caller of the request. Defaults to Depends(auth.get_user).\n\nReturns:\n    models.User: The patched user.",
                "operationId": "patch_user_users__id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Only Enabled",
                            "type": "boolean",
                            "default": true
                        },
                        "name": "only_enabled",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/wallets": {
            "post": {
                "tags": [
                    "User Wallets"
                ],
                "summary": "Create User Wallet",
                "description": "Creates a new user wallet.\n\nParams:\n    user_id (int): User identifier for which to create a new wallet.\n    user_wallet (schemas.UserWalletCreate): Info about the wallet to create.\n\nReturns:\n    models.UserWalletLite: User wallet that was created.",
                "operationId": "create_user_wallet_users__user_id__wallets_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserWalletCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserWallet"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/wallets/{user_wallet_id}": {
            "delete": {
                "tags": [
                    "User Wallets"
                ],
                "summary": "Delete User Wallet",
                "description": "Deletes a user wallet.\n\nParams:\n    user_id (int): User identifier for which to delete a wallet.\n    user_wallet_id (int): User wallet identifier to delete.",
                "operationId": "delete_user_wallet_users__user_id__wallets__user_wallet_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "User Wallet Id",
                            "type": "integer"
                        },
                        "name": "user_wallet_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "User Wallets"
                ],
                "summary": "Patch User Wallet",
                "description": "Patches a user wallet.\n\nParams:\n    user_id (int): User identifier for which to patch a new wallet.\n    user_wallet_id (int): User wallet identifier to patch.\n    user_wallet (schemas.UserWalletPatch): UserWallet fields to patch.\n\nReturns:\n    models.UserWalletLite: User wallet that was patched.",
                "operationId": "patch_user_wallet_users__user_id__wallets__user_wallet_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "User Wallet Id",
                            "type": "integer"
                        },
                        "name": "user_wallet_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserWalletPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserWallet"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Read Groups",
                "operationId": "read_groups_groups_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Group Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Game",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": "game",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Groups Groups Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Create Group",
                "operationId": "create_group_groups_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{group_id}": {
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Patch Group",
                "operationId": "patch_group_groups__group_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Read Group",
                "operationId": "read_group_groups__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Delete Group",
                "operationId": "delete_group_groups__id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{group_id}/managers/{user_id}": {
            "post": {
                "tags": [
                    "Groups"
                ],
                "summary": "Add Group Manager",
                "operationId": "add_group_manager_groups__group_id__managers__user_id__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Groups"
                ],
                "summary": "Remove Group Manager",
                "operationId": "remove_group_manager_groups__group_id__managers__user_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Groups"
                ],
                "summary": "Patch Group Manager",
                "operationId": "patch_group_manager_groups__group_id__managers__user_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupManagerPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupManager"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{group_id}/managers": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Read Group Managers",
                "operationId": "read_group_managers_groups__group_id__managers_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/ManagerTypeEnum"
                        },
                        "name": "manager_type",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupManagers"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{group_id}/players": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Read Group Players",
                "description": "Returns a filtered list of players in the group",
                "operationId": "read_group_players_groups__group_id__players_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Players"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/userrewards": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get User Rewards",
                "operationId": "get_user_rewards_users__user_id__userrewards_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get User Rewards Users  User Id  Userrewards Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserReward"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create User Reward",
                "operationId": "create_user_reward_users__user_id__userrewards_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRewardCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserReward"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/userrewards/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get User Reward",
                "operationId": "get_user_reward_users__user_id__userrewards__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserReward"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete User Reward",
                "operationId": "delete_user_reward_users__user_id__userrewards__id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/userrewards/{id}/withdraw": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Withdraw",
                "description": "Withdraw from a user reward and transfer to the provided user's address.\n\nIf the transfer is unsuccessful according to the blockchain, the user's reward\nis left as-is with its balance. If there's an unexpected error while executing\nthe transfer, then because we can't determine whether the transfer went through,\nthe user reward is deduced the amount that was withdrawn and intervention\nis required to rectify.\n\nArgs:\n- user_id (int): The id of the user who owns the user reward.\n- id (int): The id of the user reward to withdraw from\n- address (str): Address of the user to transfer the rewards to\n- amount (int): Amount to withdraw. Must be positive and less than\n    the user's current balance.\n\nReturns:\n  schemas.SelfCustodyWeb3Out: The result of the transaction.",
                "operationId": "withdraw_users__user_id__userrewards__id__withdraw_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRewardWithdrawal"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/userrewards/{id}/deposit": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Deposit",
                "operationId": "deposit_users__user_id__userrewards__id__deposit_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRewardDeposit"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserReward"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/userinvites": {
            "get": {
                "tags": [
                    "User Invites"
                ],
                "summary": "Read User Invites",
                "description": "Reads a list of user invites.",
                "operationId": "read_user_invites_userinvites_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Refcode",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": "refcode",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInvites"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Invites"
                ],
                "summary": "Create User Invite",
                "description": "Creates a new user invite.",
                "operationId": "create_user_invite_userinvites_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInviteCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInvite"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/userinvites/{id}": {
            "get": {
                "tags": [
                    "User Invites"
                ],
                "summary": "Read User Invite",
                "description": "Reads a user invite.",
                "operationId": "read_user_invite_userinvites__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInvite"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User Invites"
                ],
                "summary": "Delete User Invite",
                "description": "Deletes a user invite.",
                "operationId": "delete_user_invite_userinvites__id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/operationalaccounts": {
            "get": {
                "tags": [
                    "Operational Accounts"
                ],
                "summary": "Read Operational Accounts",
                "description": "Read operational accounts.",
                "operationId": "read_operational_accounts_operationalaccounts_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Operational Accounts Operationalaccounts Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OperationalAccount"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Operational Accounts"
                ],
                "summary": "Create Operational Account",
                "description": "Creates a new operational account.",
                "operationId": "create_operational_account_operationalaccounts_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalAccountCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/operationalaccounts/{addr}": {
            "get": {
                "tags": [
                    "Operational Accounts"
                ],
                "summary": "Read Operational Account",
                "description": "Read operational account.",
                "operationId": "read_operational_account_operationalaccounts__addr__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Addr",
                            "type": "string"
                        },
                        "name": "addr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Operational Accounts"
                ],
                "summary": "Delete Operational Account",
                "description": "Deletes an operational account.",
                "operationId": "delete_operational_account_operationalaccounts__addr__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Addr",
                            "type": "string"
                        },
                        "name": "addr",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Operational Accounts"
                ],
                "summary": "Patch Operational Account",
                "description": "Patch operational account. Requires superuser.",
                "operationId": "patch_operational_account_operationalaccounts__addr__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Addr",
                            "type": "string"
                        },
                        "name": "addr",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OperationalAccountPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationalAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/synchronization/resync/{table}": {
            "post": {
                "tags": [
                    "Synchronization"
                ],
                "summary": "Resync Quant Table",
                "description": "Informs quant to fully resync the specified table.\nDeleted data in SXM will be handled gracefully in quant once full-resync is done.\nQuery Parameters:\n- table (str): Name of the table to be fully resynced. E.g. \"game_accounts\", \"scholarships\".\nSpecify \"ALL\" to resync all supported tables.",
                "operationId": "resync_quant_table_synchronization_resync__table__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Table",
                            "type": "string"
                        },
                        "name": "table",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts": {
            "get": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Read Game Accounts",
                "description": "Read a list of game accounts based on the query parameter provided.\n\nQuery Parameters:\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.\n- sort_by (schemas.GameAccountsSortByField): Field to sort by.\n    Defaults to schemas.GameAccountsSortByField.id.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Defaults to ascending.\n- group_id (Optional[List[int]]): List of group ids to filter by.\n- guild_id (Optional[List[int]]): Guild ids, if can query across guilds.\n- game_id Optional[List[int]]: Game ids to filter\n- is_assigned_to_user (Optional[bool]): If true, then filters to only game accounts\n    that are assigned to users; if false, filters to only game accounts that\n    are not assigned to users, and if None, then doesn't filter based on\n    the assignment. Defaults to None.\n- has_scholarship (Optional[bool]): If true, then filters to only game accounts\n    with an associated scholarship; if false, filters to only game accounts\n    without an associated scholarship, and if none, then doesn't filter\n    based on this criteria. Defaults to None.\n- include_login_info (Optional[bool]): If true, the login info for the game account\n    is included in the response; otherwise, the login info is omitted.\n    The caller must have read access to the login info. Defaults to None.",
                "operationId": "read_game_accounts_gameaccounts_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/GameAccountsSortByField"
                                }
                            ],
                            "default": "id"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/OrderBy"
                                }
                            ],
                            "default": "asc"
                        },
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Group Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "guild_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Game Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "game_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Is Assigned To User",
                            "type": "boolean"
                        },
                        "name": "is_assigned_to_user",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Has Scholarship",
                            "type": "boolean"
                        },
                        "name": "has_scholarship",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Include Login Info",
                            "type": "boolean"
                        },
                        "name": "include_login_info",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccounts"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Create Game Account",
                "operationId": "create_game_account_gameaccounts_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameAccountCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/{public_address}": {
            "get": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Read Game Account",
                "description": "Reads game account based on provided public address.\n\nQuery Parameters:\n- public_address (str): Game account public address. Required.\n- include_login_info (Optional[bool]): If true, the login info for the game account\n    is included in the response; otherwise, the login info is omitted.\n    The caller must have read access to the login info. Defaults to None.\nReturns:\n    schemas.GameAccount: Game Account information.",
                "operationId": "read_game_account_gameaccounts__public_address__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Include Login Info",
                            "type": "boolean"
                        },
                        "name": "include_login_info",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Delete Game Account",
                "operationId": "delete_game_account_gameaccounts__public_address__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Patch Game Account",
                "description": "Patch a game account. Only the fields that are not none in the payload\nare updated in the game account record.\n\nUser_id is a nullable field, so it is handled with more sophistication:\n(a) if the value is None, it's not updated; (b) If the value is -1, then the\nuser_id is unset; and (c) otherwise the user_id is set to the value provided.\n\nArgs:\n    public_address (constr, optional): Public address of the game account to update.\n\nReturns:\n    schemas.GameAccount: The new state of the game account.",
                "operationId": "patch_game_account_gameaccounts__public_address__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "maxLength": 42,
                            "minLength": 42,
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameAccountPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/{public_address}/stats": {
            "get": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Read Game Account Stats",
                "description": "Reads game accounts statistics. Note that the backend services that are used to\ngather data may truncate datetimes to dates.\n\nArgs:\n- public_address (str): Address of the game account to read.\n- start (Optional[str]): Start datetime for the statistics, inclusive. The\n        interpretation of start is liberal, using dateparser.parse to parse\n        the string into a datetime. See\n        https://dateparser.readthedocs.io/en/latest/ for more information on\n        possible formats.  Defaults to two weeks ago from now.\n- end (Optional[str]): End datetime for the statistics, exclusive. The\n        interpretation of end is liberal, using dateparser.parse to parse\n        the string into a datetime. See\n        https://dateparser.readthedocs.io/en/latest/ for more information on\n        possible formats.  Defaults to now.\n- stats (Optional[List[schemas.StatsStr]]): List of stats to retrieve over\n    the timeframe. If empty, no stats are retrieved.\nReturns:\n    schemas.GameAccount: Game Account with stats",
                "operationId": "read_game_account_stats_gameaccounts__public_address__stats_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start",
                            "type": "string"
                        },
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "End",
                            "type": "string"
                        },
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/StatsStr"
                            }
                        },
                        "name": "stats",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccountStats"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/web3/transfer": {
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Transfer Fungible Token",
                "description": "Transfer fungible tokens",
                "operationId": "transfer_fungible_token_gameaccounts_web3_transfer_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransferIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/{public_address}/selfcustodyclaim": {
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Claim With Self Custody",
                "description": "Executes the claim with the game account by interacting with the guild's\nself custody api. If the claim should be forced, should_force should be to true;\nby default, if the claim is not ready according to the game API, then the claim\nis not attempted.\n\nCan claim AXS changing token value, token is SLP by default.\n\nThis endpoint returns a dictionary with information about the claiming.\nA dictionary is returned rather than a pydantic schema because the\nresponse is a composition of what the self custody app returns.",
                "operationId": "claim_with_self_custody_gameaccounts__public_address__selfcustodyclaim_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Should Force",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "should_force",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Token",
                            "type": "string"
                        },
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyClaimOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/selfcustodyweb3": {
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Do Self Custody Web3",
                "description": "Executes a web3 operation using the self-custody endpoint. If a transaction\nis not successful, a 200 is returned with failure indicated in the response.\nThe access control depends on the operation requested.",
                "operationId": "do_self_custody_web3_gameaccounts_selfcustodyweb3_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SelfCustodyWeb3In"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/web3provider": {
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Web3 Provider",
                "description": "Handles JSON RPC requests. If the caller is authorized to execute the request, it's\nrouted to the appropriate service for further processing. The response also conforms to the JSON-RPC\nspec.",
                "operationId": "web3_provider_gameaccounts_web3provider_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Web3 In",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Web3 Provider Gameaccounts Web3Provider Post",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/{public_address}/userrewardsync": {
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Do User Reward Sync",
                "operationId": "do_user_reward_sync_gameaccounts__public_address__userrewardsync_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRewardSyncIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRewardSyncOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gameaccounts/{public_address}/health": {
            "get": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Check Game Account Health",
                "description": "Checks game account health",
                "operationId": "check_game_account_health_gameaccounts__public_address__health_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccountHealth"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Game Accounts"
                ],
                "summary": "Make Game Account Healthy",
                "description": "Makes game account healthy",
                "operationId": "make_game_account_healthy_gameaccounts__public_address__health_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Public Address",
                            "type": "string"
                        },
                        "name": "public_address",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameAccountHealth"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/supplycollectrecords": {
            "get": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Read Supply Collect Records",
                "operationId": "read_supply_collect_records_scholarships_supplycollectrecords_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplyCollectRecords"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/{id}": {
            "get": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Read Scholarship",
                "description": "Read a scholarship\n\nParameters:\n- id (int): Id of the scholarship to read.",
                "operationId": "read_scholarship_scholarships__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scholarship"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Delete Scholarship",
                "description": "Delete a scholarship\n\nParameters:\n- id (int): Id of the scholarship to delete.",
                "operationId": "delete_scholarship_scholarships__id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Patch Scholarship",
                "description": "Patch a scholarship. Only fields set in the request body\nwill be modified. If a nullable field is set in the body to None,\nthen the field will be updated to None. If a non-nullable field\nis set to None, then that's an invalid patch request and a\n400 exception is raised. Omit fields that should not be updated\nfrom the request body.\nIf the patch is changing the group id,\nthe associated game account group id will also be updated\n\nParameters:\n- id (int): Id of the scholarship to patch.",
                "operationId": "patch_scholarship_scholarships__id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScholarshipPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scholarship"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships": {
            "get": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Read Scholarships",
                "description": "Read a paginated list of scholarships.\n\nQuery Parameters:\n- guild_id (Optional[int], optional): Restrict scholarships to a guild id. If the\n    caller cannot query across guilds, then by default, the endpoint will limit\n    the scholarships to scholarships in the caller's guild.\n- group_id (Optional[int]): Group id to which scholarships are assigned to.\n    Defaults to None.\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.",
                "operationId": "read_scholarships_scholarships_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Group Id",
                            "type": "integer"
                        },
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scholarships"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Create Scholarship",
                "description": "Create a new scholarship record.",
                "operationId": "create_scholarship_scholarships_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScholarshipCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scholarship"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/{id}/claim": {
            "post": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Claim Scholarship",
                "description": "Claim a scholarship. This can be called by an admin, manager, or by the player\nwho is claiming the scholarship. The player must already have a valid user wallet\non the same chain as the scholarship.\n\nInputs:\n- user_id: The id of the user that's claiming the scholarship.",
                "operationId": "claim_scholarship_scholarships__id__claim_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClaimScholarship"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scholarship"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/{id}/revoke": {
            "post": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Revoke Scholarship",
                "description": "Revoke a scholarship. This can be called by an admin, manager, or the user that\ncurrently is assigned the scholarship.\n\nThe necessary blockchain operations are triggered in order to revoke the scholarship\nfrom the user. The specific blockchain operations depend on the type of\nthe scholarship.",
                "operationId": "revoke_scholarship_scholarships__id__revoke_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scholarship"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/{id}/supply": {
            "post": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Supply Scholarship",
                "description": "Supplies tokens to a scholarship by transferring them to the underlying\ngame account. This is only callable to managers of the scholarship",
                "operationId": "supply_scholarship_scholarships__id__supply_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScholarshipSupply"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/{id}/collect": {
            "post": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Collect Scholarship",
                "description": "Collects earnings on a scholarship, transferring from the game account to\nthe guild treasury account",
                "operationId": "collect_scholarship_scholarships__id__collect_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScholarshipCollect"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/scholarships/{id}/actions": {
            "get": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Read Scholarship Actions",
                "description": "Returns the possible actions that can be performed on the scholarship.\n\nArgs:\n- id (int): The id of the scholarship\n- skip (int): The number of items to skip. Defaults to 0\n- limit (int): The maximum number of items to return. Defaults to 100\n\nReturns:\n    schemas.ScholarshipActions: The actions that are available for the scholarship.",
                "operationId": "read_scholarship_actions_scholarships__id__actions_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScholarshipActions"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Scholarships"
                ],
                "summary": "Do Scholarship Action",
                "operationId": "do_scholarship_action_scholarships__id__actions_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScholarshipActionIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gamenfts/{id}": {
            "get": {
                "tags": [
                    "Game NFTs"
                ],
                "summary": "Read Game Nft",
                "description": "Read a game nft\n\nParameters:\n- id (int): Id of the game nft to read.",
                "operationId": "read_game_nft_gamenfts__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameNft"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Game NFTs"
                ],
                "summary": "Delete Game Nft",
                "description": "Delete a game nft\n\nParameters:\n- id (int): Id of the game nft to delete.",
                "operationId": "delete_game_nft_gamenfts__id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Game NFTs"
                ],
                "summary": "Patch Game Nft",
                "description": "Patch a game nft. Only fields set in the request body\nwill be modified. If a nullable field is set in the body to None,\nthen the field will be updated to None. If a non-nullable field\nis set to None, then that's an invalid patch request and a\n400 exception is raised. Omit fields that should not be updated\nfrom the request body.\n\nParameters:\n- id (int): Id of the game nft to patch.",
                "operationId": "patch_game_nft_gamenfts__id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameNftPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameNft"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gamenfts": {
            "get": {
                "tags": [
                    "Game NFTs"
                ],
                "summary": "Read Game Nfts",
                "description": "Read a paginated list of gamenfts.\n\nQuery Parameters:\n- guild_id (Optional[int], optional): Restrict gamenfts to a guild id. If the\n    caller cannot query across guilds, then by default, the endpoint will limit\n    the gamenfts to gamenfts in the caller's guild.\n\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.",
                "operationId": "read_game_nfts_gamenfts_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameNfts"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Game NFTs"
                ],
                "summary": "Create Game Nft",
                "description": "Create a new game nft.",
                "operationId": "create_game_nft_gamenfts_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameNftCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GameNft"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/gamenfts/transfer": {
            "post": {
                "tags": [
                    "Game NFTs"
                ],
                "summary": "Transfer Game Nfts",
                "description": "Transfer game nfts",
                "operationId": "transfer_game_nfts_gamenfts_transfer_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameNftTransfer"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}": {
            "get": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Read Guild",
                "description": "Returns information about the provided guild. If the caller\nis an admin or superuser, then the extra metadata is included.",
                "operationId": "read_guild_guilds__guild_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Delete Guild",
                "operationId": "delete_guild_guilds__guild_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Patch Guild",
                "operationId": "patch_guild_guilds__guild_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuildPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds": {
            "get": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Read Guilds",
                "description": "Returns a list of guilds. This endpoint is intended to only be called by\ninternal services so it requires either the superuser, issuer, or quant role.\nThis endpoint always returns the guilds with metadata.\n\nIf the caller does not have on the necessary roles, a 403 is returned.",
                "operationId": "read_guilds_guilds_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Guilds Guilds Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Guild"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Create Guild",
                "operationId": "create_guild_guilds_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuildCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildCreateOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/files": {
            "patch": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Patch Guild Files",
                "operationId": "patch_guild_files_guilds__guild_id__files_patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_patch_guild_files_guilds__guild_id__files_patch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/treasuryaccounts": {
            "get": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Read Treasury Accounts",
                "description": "Read a paginated list of Treasury Accounts\n\nQuery Parameters:\n- account_type (str): Account type\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.\n- account_type (Optional[List[schemas.AccountEnum]]): Filter by account type\n- group_id (Optional[List[int]]): Filter by accounts associated with the group id\n- assigned_to_group (Optional[bool]): Filter by accounts assigned to a group.\n    If True, not assigned to a group if false, and accounts that are both if None.\n    Defaults to None.\n- game_id (Optional[List[int]]): Filter by accounts associated with a game_id.\n    Defaults to None.\n- sort_by (schemas.TreasuryAccountSortByField): Field to sort by.\n    Defaults to `id`.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Either `asc` or `desc`. Defaults to `asc`.",
                "operationId": "read_treasury_accounts_guilds__guild_id__treasuryaccounts_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/AccountEnum"
                            }
                        },
                        "name": "account_type",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Group Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Assigned To Group",
                            "type": "boolean"
                        },
                        "name": "assigned_to_group",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Game Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "game_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Token",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TreasuryAccountSortByField"
                                }
                            ],
                            "default": "id"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/OrderBy"
                        },
                        "name": "order_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TreasuryAccounts"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Create Treasury Account",
                "operationId": "create_treasury_account_guilds__guild_id__treasuryaccounts_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TreasuryAccountCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TreasuryAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/treasuryaccounts/{treasury_account_id}": {
            "get": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Read Treasury Account",
                "operationId": "read_treasury_account_guilds__guild_id__treasuryaccounts__treasury_account_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Treasury Account Id",
                            "type": "integer"
                        },
                        "name": "treasury_account_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TreasuryAccountWithGroupLite"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Delete Treasury Account",
                "operationId": "delete_treasury_account_guilds__guild_id__treasuryaccounts__treasury_account_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Treasury Account Id",
                            "type": "integer"
                        },
                        "name": "treasury_account_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/treasuryaccounts/initialize": {
            "post": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Initialize Treasury Accounts",
                "description": "Initializes treasury accounts for the guild.\n\nThe intention of this endpoint is to be called around the time when a guild\nis created, but it's written such that it could be called at any time.\nThe logic is as follows:\n\n1. For each group in the guild that doesn't have a treasury account, create\na treasury account and associate it with the group.\n\n2. For each eth and ERC20 token associated with each active guild game, create a\nnew wallet in the self-custody node and register a treasury account if a\ntreasury account doesn't already exist for that token & game.\n\nThis can only be called by an admin of the guild.",
                "operationId": "initialize_treasury_accounts_guilds__guild_id__treasuryaccounts_initialize_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TreasuryAccounts"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/games": {
            "get": {
                "tags": [
                    "Guild Games"
                ],
                "summary": "Read Guild Games",
                "description": "Returns a list of games assigned to a guild.\nIf caller is not quant or superuser and does not belong to\nthe guild, 404 is returned.\n\nQuery Parameters:\n- guild_id (int): Guild identifier.\n- game_id (Optional[int]): Game identifier. Defaults to none.\n- game_status (Optional[List[schemas.GameStatus]]):\n    List of game classifier statuses. E.g. show only assigned experimental games.\n    Defaults to None.\n- is_active (Optional[bool]):\n    Is guild's assigned game active or not.\n    Defaults to None.\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.",
                "operationId": "read_guild_games_guilds__guild_id__games_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Game Id",
                            "type": "integer"
                        },
                        "name": "game_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/GameStatus"
                            }
                        },
                        "name": "game_status",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Is Active",
                            "type": "boolean"
                        },
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildGames"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guild Games"
                ],
                "summary": "Create Guild Game",
                "description": "Creates a new game record for given guild.\nIf the caller does not belong to the guild, 404 is returned.\nIf user is not admin, returns 404.\nIf guild in query string and in body do not match, returns 400.\nIf either game or guild is not found, returns 404.\nIf guild game already exists, returns 400.\nOnly superuser can assign experimental games to guilds.\n\nQuery Parameters:\n- guild_id (int): Guild identifier.\n- guild_game (schemas.GuildGameCreate): GuildGame object.\n    Need to specify guild id and game id.",
                "operationId": "create_guild_game_guilds__guild_id__games_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuildGameCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildGame"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/games/{game_id}": {
            "get": {
                "tags": [
                    "Guild Games"
                ],
                "summary": "Read Guild Game",
                "description": "Returns a guild game based on provided guild and game.\nIf the caller does not belong to the guild, 404 is returned.\nNon-admin users cannot see inactive guild games or\nguild games assigned to experimental games.\n\nQuery Parameters:\n- guild_id (int): Guild identifier.\n- game_id (int): Game identifier.",
                "operationId": "read_guild_game_guilds__guild_id__games__game_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Game Id",
                            "type": "integer"
                        },
                        "name": "game_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildGame"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Guild Games"
                ],
                "summary": "Delete Guild Game",
                "description": "Deletes a guild game.\nIf the caller does not belong to the guild, a 404 is returned.\nIf user is not admin, returns 404.\nIf either game or guild is not found, returns 404.\nIf guild game has any groups assigned, returns 400.\n\nQuery Parameters:\n- guild_id (int): Guild identifier.\n- game_id (int): Game identifier.",
                "operationId": "delete_guild_game_guilds__guild_id__games__game_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Game Id",
                            "type": "integer"
                        },
                        "name": "game_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Guild Games"
                ],
                "summary": "Patch Guild Game",
                "description": "Patches given guild's game record.\nIf the caller does not belong to the guild, 404 is returned.\nIf user is not admin, returns 404.\nIf either game or guild is not found, returns 404.\nIf guild's game record is not found, returns 404.\n\nQuery Parameters:\n- guild_id (int): Guild identifier.\n- game_id (int): Game identifier.\n- patch: (schemas.GuildGamePatch): Defines fields that should be patched.",
                "operationId": "patch_guild_game_guilds__guild_id__games__game_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Game Id",
                            "type": "integer"
                        },
                        "name": "game_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GuildGamePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildGame"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/guilds/{guild_id}/info": {
            "get": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Read Guild With Api Key",
                "description": "Returns information about the provided guild, including the extra\nmetadata. This endpoint is protected with an API key instead of a JWT.",
                "operationId": "read_guild_with_api_key_guilds__guild_id__info_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Guild Id",
                            "type": "integer"
                        },
                        "name": "guild_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": []
                    }
                ]
            }
        },
        "/guilds/slug/{slug}/info": {
            "get": {
                "tags": [
                    "Guilds"
                ],
                "summary": "Read Guild By Slug With Api Key",
                "description": "Returns information about the provided guild, including the extra\nmetadata. This endpoint is protected with an API key instead of a JWT.",
                "operationId": "read_guild_by_slug_with_api_key_guilds_slug__slug__info_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Slug",
                            "type": "string"
                        },
                        "name": "slug",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Guild"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "APIKeyHeader": []
                    }
                ]
            }
        },
        "/nfts/users/{user_id}": {
            "get": {
                "tags": [
                    "NFTs"
                ],
                "summary": "Read User Nft",
                "description": "Returns the metadata for the specified user NFT",
                "operationId": "read_user_nft_nfts_users__user_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Nft"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stats/groups/totals": {
            "get": {
                "tags": [
                    "Group Total Stats"
                ],
                "summary": "Read Group Total Stats",
                "description": "Reads a list of group totals statistics from Quant based on the query parameters provided.\n   Use this endpoint when group statistics are needed. Otherwise consider using /groups endpoint.\nQuery Parameters:\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 25.\n- sort_by (statistics.GroupTotalStatsSortByField): Field to sort by.\n    Defaults to statistics.GroupTotalStatsSortByField.id.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Defaults to ascending.\n- game (List[schemas.GameStr]): Games to filter by. Accepts string values of GameStr enum, e.g. ?game=Axie%20Infinity&game=Pegaxy",
                "operationId": "read_group_total_stats_stats_groups_totals_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 25
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/GroupTotalStatsSortByField"
                                }
                            ],
                            "default": "id"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/OrderBy"
                                }
                            ],
                            "default": "asc"
                        },
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/GameStr"
                            }
                        },
                        "name": "game",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupTotalsStatisticsOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/groups/totals/{id}": {
            "get": {
                "tags": [
                    "Group Total Stats"
                ],
                "summary": "Read Single Group Total Stats",
                "description": "Returns a single group with aggregated metrics from Quant.\n   Use this endpoint when group total statistics are needed. Otherwise, consider using /groups/{id} endpoint.\nQuery Parameters:\n- id (int): Group identifier.",
                "operationId": "read_single_group_total_stats_stats_groups_totals__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupTotalsStatisticOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/groups/{id}/earnings": {
            "get": {
                "tags": [
                    "Group Total Stats"
                ],
                "summary": "Read Group Earnings",
                "description": "Returns group earnings over time.\nQuery Parameters:\n- id (int): Group identifier.\n- period (statistics.GroupPeriod) - Grouping period. Defaults to monthly.\nAllowed values: daily, weekly, monthly.\n- date_start [Optional[datetime.date]]: Since when to return earnings. Optional. Inclusive.\n- date_end [Optional[datetime.date]]: Until when to return earnings. Optional. Exclusive.",
                "operationId": "read_group_earnings_stats_groups__id__earnings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/GroupPeriod"
                                }
                            ],
                            "default": "monthly"
                        },
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Group Earnings Stats Groups  Id  Earnings Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GroupEarningOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/scholarships": {
            "get": {
                "tags": [
                    "Scholarships Stats"
                ],
                "summary": "Read Scholarships Stats",
                "description": "Reads a list of scholarships from Quant based on the query parameters provided.\n   Use this endpoint when scholarship statistics are needed. Otherwise, consider using /scholarships endpoint.\nQuery Parameters:\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 25.\n- sort_by (statistics.ScholarshipStatsSortByField): Field to sort by.\n    Defaults to statistics.ScholarshipStatsSortByField.performance.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Defaults to descending.\n- game (List[GameStr]): Games to filter by. Accepts string values of GameStr enum, e.g. game=Axie%20Infinity&game=Pegaxy.\n- team_id (List[int]): Team ids (groups) to filter by. Accepts integer values, e.g. team_id=1&team_id=2.\n- scholarship_status (List[schemas.ScholarshipStatus]): Statuses to filter by.\n    Accepts string values of schemas.ScholarshipStatus, e.g. scholarship_status=draft&scholarship_status=assigned.\n- user_id (Optional[int]: User id to filter by. Returns game accounts assigned to user.\n- search_username (Optional[str]): Search term for the username. Does\n    a case-insensitive search. Defaults to None.\n- search_wallet (Optional[str]): Search term for public wallet address.\n    Does a case-insensitive search. Can be a game account or user wallet. Defaults to None.\n- average_duration (Optional[int]): Since when to calculate averages in days. Defaults to 14.\n- below_quota (Optional[bool]): Only return scholarships whose average earnings are below quota. Defaults to None.\n- above_quota (Optional[bool]): Only return scholarships whose average earnings match of exceed quota. Defaults to None.",
                "operationId": "read_scholarships_stats_stats_scholarships_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 25
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ScholarshipStatsSortByField"
                                }
                            ],
                            "default": "performance"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/OrderBy"
                                }
                            ],
                            "default": "desc"
                        },
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/GameStr"
                            }
                        },
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Team Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "team_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ScholarshipStatus"
                            }
                        },
                        "name": "scholarship_status",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Search Username",
                            "type": "string"
                        },
                        "name": "search_username",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Search Wallet",
                            "type": "string"
                        },
                        "name": "search_wallet",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Average Duration",
                            "type": "integer",
                            "default": 14
                        },
                        "name": "average_duration",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Below Quota",
                            "type": "boolean"
                        },
                        "name": "below_quota",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Above Quota",
                            "type": "boolean"
                        },
                        "name": "above_quota",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScholarshipStatisticsOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/scholarships/csv": {
            "get": {
                "tags": [
                    "Scholarships Stats"
                ],
                "summary": "Read Scholarships Stats Csv",
                "description": "Reads a CSV of scholarships from Quant based on the query parameters provided.\n   Use this endpoint when scholarship statistics are needed. Otherwise, consider using /scholarships endpoint.\nQuery Parameters:\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to None.\n- sort_by (statistics.ScholarshipStatsSortByField): Field to sort by.\n    Defaults to statistics.ScholarshipStatsSortByField.performance.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Defaults to descending.\n- game (List[GameStr]): Games to filter by. Accepts string values of GameStr enum, e.g. game=Axie%20Infinity&game=Pegaxy.\n- team_id (List[int]): Team ids (groups) to filter by. Accepts integer values, e.g. team_id=1&team_id=2.\n- scholarship_status (List[schemas.ScholarshipStatus]): Statuses to filter by.\n    Accepts string values of schemas.ScholarshipStatus, e.g. scholarship_status=draft&scholarship_status=assigned.\n- user_id (Optional[int]: User id to filter by. Returns game accounts assigned to user.\n- search_username (Optional[str]): Search term for the username. Does\n    a case-insensitive search. Defaults to None.\n- search_wallet (Optional[str]): Search term for public wallet address.\n    Does a case-insensitive search. Defaults to None.\n- average_duration (Optional[int]): Since when to calculate averages in days. Defaults to 14.\n- below_quota (Optional[bool]): Only return scholarships whose average earnings are below quota. Defaults to None.\n- above_quota (Optional[bool]): Only return scholarships whose average earnings match of exceed quota. Defaults to None.",
                "operationId": "read_scholarships_stats_csv_stats_scholarships_csv_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer"
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ScholarshipStatsSortByField"
                                }
                            ],
                            "default": "performance"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/OrderBy"
                                }
                            ],
                            "default": "desc"
                        },
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/GameStr"
                            }
                        },
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Team Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "team_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ScholarshipStatus"
                            }
                        },
                        "name": "scholarship_status",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Search Username",
                            "type": "string"
                        },
                        "name": "search_username",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Search Wallet",
                            "type": "string"
                        },
                        "name": "search_wallet",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Average Duration",
                            "type": "integer",
                            "default": 14
                        },
                        "name": "average_duration",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Below Quota",
                            "type": "boolean"
                        },
                        "name": "below_quota",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Above Quota",
                            "type": "boolean"
                        },
                        "name": "above_quota",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/scholarships/{id}": {
            "get": {
                "tags": [
                    "Scholarship Stats"
                ],
                "summary": "Read Scholarship Stats",
                "description": "Returns a single scholarship with stats from Quant.\n   Use this endpoint when scholarship statistics are needed. Otherwise, consider using /scholarships/{id} endpoint.\nQuery Parameters:\n- id (int): Scholarship identifier.",
                "operationId": "read_scholarship_stats_stats_scholarships__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScholarshipStatisticOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/scholarships/{id}/earnings": {
            "get": {
                "tags": [
                    "Scholarship Stats"
                ],
                "summary": "Read Scholarship Earnings",
                "description": "Returns detailed specified scholarship earnings from Quant.\nQuery Parameters:\n- id (int): Scholarship identifier.\n- date_start (Optional[datetime.date]): Since when to return earnings. Inclusive.\n- date_to (Optional[datetime.date]): Until when to return earnings. Exclusive.",
                "operationId": "read_scholarship_earnings_stats_scholarships__id__earnings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Scholarship Earnings Stats Scholarships  Id  Earnings Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ScholarshipEarningOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/scholarships/{id}/mmr": {
            "get": {
                "tags": [
                    "Scholarship Stats"
                ],
                "summary": "Read Scholarship Mmr",
                "description": "Returns detailed specified scholarship earnings from Quant.\nQuery Parameters:\n- id (int): Scholarship identifier.\n- date_start (Optional[datetime.datetime]): Since when to return mmr. Inclusive.\n- date_end (Optional[datetime.datetime]): Until when to return mmr. Exclusive.",
                "operationId": "read_scholarship_mmr_stats_scholarships__id__mmr_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Scholarship Mmr Stats Scholarships  Id  Mmr Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ScholarshipMmrOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/scholarships/{id}/metrics": {
            "get": {
                "tags": [
                    "Scholarship Stats"
                ],
                "summary": "Read Scholarship Metrics",
                "description": "Returns scholarship metrics over time.\nQuery Parameters:\n- id (int): Scholarship identifier.\n- date_start (Optional[datetime.datetime]): Since when to return metrics. Inclusive.\n- date_end (Optional[datetime.datetime]): Until when to return metrics. Exclusive.",
                "operationId": "read_scholarship_metrics_stats_scholarships__id__metrics_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Scholarship Metrics Stats Scholarships  Id  Metrics Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ScholarshipMetricOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/users/{id}/earnings": {
            "get": {
                "tags": [
                    "User Stats"
                ],
                "summary": "Read User Earnings",
                "description": "Returns detailed specified user earnings from Quant.\nEarnings are aggregated if user has multiple scholarships for same game.\nQuery Parameters:\n- id (int): User identifier.\n- date_start (Optional[datetime.datetime]): Since when to return earnings. Inclusive.\n- date_end (Optional[datetime.datetime]): Until when to return earnings. Exclusive.",
                "operationId": "read_user_earnings_stats_users__id__earnings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read User Earnings Stats Users  Id  Earnings Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserEarningOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/users/{id}/mmr": {
            "get": {
                "tags": [
                    "User Stats"
                ],
                "summary": "Read User Mmr",
                "description": "Returns detailed specified user earnings from Quant.\nQuery Parameters:\n- id (int): User identifier.\n- date_start (Optional[datetime.datetime]): Since when to return earnings. Inclusive.\n- date_end (Optional[datetime.datetime]): Until when to return earnings. Exclusive.",
                "operationId": "read_user_mmr_stats_users__id__mmr_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read User Mmr Stats Users  Id  Mmr Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserMmrOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/users/{id}/totals": {
            "get": {
                "tags": [
                    "User Stats"
                ],
                "summary": "Read User Totals",
                "description": "Returns specified user total and average earnings for games.\nQuery Parameters:\n- id (int): User identifier.\n- average_duration (Optional[int]): Since when to calculate averages in days. Defaults to 14.",
                "operationId": "read_user_totals_stats_users__id__totals_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Average Duration",
                            "type": "integer",
                            "default": 14
                        },
                        "name": "average_duration",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTotalsOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/guilds/{id}/totals": {
            "get": {
                "tags": [
                    "Guild Stats"
                ],
                "summary": "Read Guild Overall Stats",
                "description": "Returns specified guilds overall totals.\nQuery Parameters:\n- id (int): Guild identifier.",
                "operationId": "read_guild_overall_stats_stats_guilds__id__totals_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GuildOverallTotalOut"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/guilds/{id}/totals/earnings": {
            "get": {
                "tags": [
                    "Guild Stats"
                ],
                "summary": "Read Guild Total Earnings",
                "description": "Returns specified guilds total earnings.\nQuery Parameters:\n- id (int): Guild identifier.",
                "operationId": "read_guild_total_earnings_stats_guilds__id__totals_earnings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Guild Total Earnings Stats Guilds  Id  Totals Earnings Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GameTotal"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/stats/guilds/{id}/earnings": {
            "get": {
                "tags": [
                    "Guild Stats"
                ],
                "summary": "Read Guild Earnings",
                "description": "Returns guild earnings over time.\nQuery Parameters:\n- id (int): Guild identifier.\n- period (statistics.GroupPeriod) - Grouping period. Defaults to monthly.\nAllowed values: daily, weekly, monthly.\n- date_start [Optional[datetime.date]]: Since when to return earnings. Optional. Inclusive.\n- date_end [Optional[datetime.date]]: Until when to return earnings. Optional. Exclusive.",
                "operationId": "read_guild_earnings_stats_guilds__id__earnings_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/GroupPeriod"
                                }
                            ],
                            "default": "monthly"
                        },
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date Start",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Date End",
                            "type": "string",
                            "format": "date"
                        },
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Read Guild Earnings Stats Guilds  Id  Earnings Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GuildEarningOut"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/experiences/all": {
            "get": {
                "tags": [
                    "User Experiences"
                ],
                "summary": "Read User Experiences",
                "description": "Read a paginated list of User Experiences\n\nQuery Parameters:\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.",
                "operationId": "read_user_experiences_users_experiences_all_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserExperiences"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}/experiences": {
            "get": {
                "tags": [
                    "User Experiences"
                ],
                "summary": "Read User Experience",
                "description": "Read a user experience\n\nParameters:\n- user_id (int): Id of the user experience.",
                "operationId": "read_user_experience_users__user_id__experiences_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserExperience"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Experiences"
                ],
                "summary": "Create User Experience",
                "description": "Create a new user experience",
                "operationId": "create_user_experience_users__user_id__experiences_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserExperienceCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserExperience"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User Experiences"
                ],
                "summary": "Delete User Experience",
                "description": "Delete a user experience if it exists",
                "operationId": "delete_user_experience_users__user_id__experiences_delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "User Experiences"
                ],
                "summary": "Patch User Experience",
                "operationId": "patch_user_experience_users__user_id__experiences_patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "User Id",
                            "type": "integer"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserExperiencePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserExperience"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/games/{id}": {
            "get": {
                "tags": [
                    "Games"
                ],
                "summary": "Read Game",
                "description": "Read a game\n\nParameters:\n- id (int): Id of the game to read.",
                "operationId": "read_game_games__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Games"
                ],
                "summary": "Patch Game",
                "description": "Patch a game. Only fields set in the request body\nwill be modified. If a nullable field is set in the body to None,\nthen the field will be updated to None. If a non-nullable field\nis set to None, then that's an invalid patch request and a\n400 exception is raised. Omit fields that should not be updated\nfrom the request body.\n\nParameters:\n- id (int): Id of the game to patch.",
                "operationId": "patch_game_games__id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamePatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/games": {
            "get": {
                "tags": [
                    "Games"
                ],
                "summary": "Read Games",
                "description": "Read a paginated list of games.\n\nQuery Parameters:\n- status (List[schemas.GameStatus]: A list of statuses by which to filter games.\n    By default, returns all records that a user can see, e.g. admin users can see everything,\n    non-admin users can see only active games.\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.",
                "operationId": "read_games_games_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/GameStatus"
                            }
                        },
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Games"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Games"
                ],
                "summary": "Create Game",
                "description": "Creates a new game.\nIf caller is not superuser, returns 403.\n\nQuery Parameters:\n- game (schemas.GameCreate): Game object with title and state.",
                "operationId": "create_game_games_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GameCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Game"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/transactionlogs": {
            "get": {
                "tags": [
                    "Transaction Logs"
                ],
                "summary": "Read Transaction Logs",
                "description": "Read a paginated list of Transaction Logs\n\nQuery Parameters:\n- user_id (int): Id of the user to filter upon. Fetch all latest\n    available records if none\n- guild_id (int): Id of the guild to filter upon. Fetch all latest\n    available records if none\n- transaction_type (str): Transaction type\n- token (str): Token type\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.\n- sort_by (schemas.TransactionSortByField): Field to sort by. Amount is not a\n    sortable field because the amount is stored as a string (because the\n    values can be very large), and string sorting on the amount field yields\n    unexpected results. Defaults to schemas.TransactionSortByField.id.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Defaults to ascending.\n- start_datetime (dt.datetime): Start datetime of the period (inclusive)\n- end_datetime (dt.datetime): End datetime of the period (exclusive)",
                "operationId": "read_transaction_logs_transactionlogs_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start Datetime",
                            "type": "string",
                            "format": "date-time"
                        },
                        "name": "start_datetime",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "End Datetime",
                            "type": "string",
                            "format": "date-time"
                        },
                        "name": "end_datetime",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/TransactionSortByField"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/OrderBy"
                        },
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "guild_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Token",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TransactionTypeStr"
                            }
                        },
                        "name": "transaction_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionLogs"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/transactionlogs/csv": {
            "get": {
                "tags": [
                    "Transaction Logs"
                ],
                "summary": "Read Transaction Logs Csv",
                "description": "Read a CSV of Transaction Logs\n\nQuery Parameters:\n- user_id (int): Id of the user to filter upon. Fetch all latest\n    available records if none\n- guild_id (int): Id of the guild to filter upon. Fetch all latest\n    available records if none\n- transaction_type (str): Transaction type\n- token (str): Token type\n- skip (int): Number of records to skip. Defaults to 0.\n- limit (int): Max number of records to return. Defaults to 100.\n- sort_by (schemas.TransactionSortByField): Field to sort by. Amount is not a\n    sortable field because the amount is stored as a string (because the\n    values can be very large), and string sorting on the amount field yields\n    unexpected results. Defaults to schemas.TransactionSortByField.id.\n- order_by (schemas.OrderBy): Specifies how to order the results.\n    Defaults to ascending.\n- start_datetime (dt.datetime): Start datetime of the period (inclusive)\n- end_datetime (dt.datetime): End datetime of the period (exclusive)",
                "operationId": "read_transaction_logs_csv_transactionlogs_csv_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip",
                            "type": "integer",
                            "default": 0
                        },
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "default": 100
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Start Datetime",
                            "type": "string",
                            "format": "date-time"
                        },
                        "name": "start_datetime",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "End Datetime",
                            "type": "string",
                            "format": "date-time"
                        },
                        "name": "end_datetime",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/TransactionSortByField"
                        },
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/OrderBy"
                        },
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "User Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Guild Id",
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "name": "guild_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Token",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "name": "token",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TransactionTypeStr"
                            }
                        },
                        "name": "transaction_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/transactionlogs/{id}": {
            "get": {
                "tags": [
                    "Transaction Logs"
                ],
                "summary": "Read Transaction Log",
                "description": "Read a Transaction Log by id\n\nQuery Parameters:\n- id (int): Id of the transaction log",
                "operationId": "read_transaction_log_transactionlogs__id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Id",
                            "type": "integer"
                        },
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionLog"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    },
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/proxy": {
            "get": {
                "tags": [
                    "Proxy"
                ],
                "summary": "Proxy Get",
                "description": "Proxies GET requests for UI.\n\nQuery Parameters:\n- url (str): URL which needs to be called to get data.",
                "operationId": "proxy_get_proxy_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Url",
                            "type": "string"
                        },
                        "name": "url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Proxy"
                ],
                "summary": "Proxy Post",
                "description": "Proxies POST requests for UI.\n\nQuery Parameters:\n- url (str): URL which needs to be called to get data.\n- body (Dict): POST body which needs to be sent.",
                "operationId": "proxy_post_proxy_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Url",
                            "type": "string"
                        },
                        "name": "url",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Body",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "AccountEnum": {
                "title": "AccountEnum",
                "enum": [
                    "GROUP_NFT",
                    "GUILD_TREASURY",
                    "GENERAL_TREASURY"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "AuthToken": {
                "title": "AuthToken",
                "required": [
                    "access_token",
                    "token_type"
                ],
                "type": "object",
                "properties": {
                    "access_token": {
                        "title": "Access Token",
                        "type": "string"
                    },
                    "token_type": {
                        "title": "Token Type",
                        "type": "string"
                    }
                }
            },
            "Body_patch_guild_files_guilds__guild_id__files_patch": {
                "title": "Body_patch_guild_files_guilds__guild_id__files_patch",
                "type": "object",
                "properties": {
                    "logo": {
                        "title": "Logo",
                        "type": "string",
                        "format": "binary"
                    },
                    "icon": {
                        "title": "Icon",
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "ClaimScholarship": {
                "title": "ClaimScholarship",
                "required": [
                    "user_id"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    }
                }
            },
            "DiscordLogin": {
                "title": "DiscordLogin",
                "required": [
                    "code",
                    "redirect_uri"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Code",
                        "type": "string"
                    },
                    "redirect_uri": {
                        "title": "Redirect Uri",
                        "type": "string"
                    }
                }
            },
            "Game": {
                "title": "Game",
                "required": [
                    "id",
                    "title",
                    "status",
                    "token_strs"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/GameStatus"
                    },
                    "token_strs": {
                        "title": "Token Strs",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "GameAccount": {
                "title": "GameAccount",
                "required": [
                    "id",
                    "public_address",
                    "group_id",
                    "guild_id",
                    "game",
                    "game_id",
                    "date_created",
                    "date_modified",
                    "group"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game": {
                        "title": "Game",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserLite"
                    },
                    "group": {
                        "$ref": "#/components/schemas/GroupLite"
                    },
                    "login_info": {
                        "$ref": "#/components/schemas/GameAccountLoginInfo"
                    }
                }
            },
            "GameAccountCreate": {
                "title": "GameAccountCreate",
                "required": [
                    "public_address",
                    "group_id"
                ],
                "type": "object",
                "properties": {
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "format": "password",
                        "writeOnly": true
                    }
                }
            },
            "GameAccountHealth": {
                "title": "GameAccountHealth",
                "required": [
                    "eth_balance",
                    "min_eth_balance",
                    "is_healthy"
                ],
                "type": "object",
                "properties": {
                    "eth_balance": {
                        "title": "Eth Balance",
                        "type": "integer"
                    },
                    "min_eth_balance": {
                        "title": "Min Eth Balance",
                        "type": "number"
                    },
                    "is_healthy": {
                        "title": "Is Healthy",
                        "type": "boolean"
                    }
                }
            },
            "GameAccountLoginInfo": {
                "title": "GameAccountLoginInfo",
                "type": "object",
                "properties": {
                    "email": {
                        "title": "Email",
                        "type": "string"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string"
                    },
                    "qr_code": {
                        "title": "Qr Code",
                        "type": "string"
                    }
                }
            },
            "GameAccountPatch": {
                "title": "GameAccountPatch",
                "type": "object",
                "properties": {
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "format": "password",
                        "writeOnly": true
                    }
                }
            },
            "GameAccountStats": {
                "title": "GameAccountStats",
                "type": "object",
                "properties": {
                    "slp": {
                        "title": "Slp",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "mmr": {
                        "title": "Mmr",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "GameAccounts": {
                "title": "GameAccounts",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameAccount"
                        }
                    }
                }
            },
            "GameAccountsSortByField": {
                "title": "GameAccountsSortByField",
                "enum": [
                    "id",
                    "group_title"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GameCreate": {
                "title": "GameCreate",
                "required": [
                    "title"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GameStatus"
                            }
                        ],
                        "default": "experimental"
                    }
                }
            },
            "GameNft": {
                "title": "GameNft",
                "required": [
                    "id",
                    "guild_id",
                    "token_symbol",
                    "nft_id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "token_symbol": {
                        "title": "Token Symbol",
                        "type": "string"
                    },
                    "nft_id": {
                        "title": "Nft Id",
                        "type": "integer"
                    },
                    "scholarship_id": {
                        "title": "Scholarship Id",
                        "type": "integer"
                    }
                }
            },
            "GameNftCreate": {
                "title": "GameNftCreate",
                "required": [
                    "guild_id",
                    "token_symbol",
                    "nft_id"
                ],
                "type": "object",
                "properties": {
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "token_symbol": {
                        "title": "Token Symbol",
                        "type": "string"
                    },
                    "nft_id": {
                        "title": "Nft Id",
                        "type": "integer"
                    },
                    "scholarship_id": {
                        "title": "Scholarship Id",
                        "type": "integer"
                    }
                }
            },
            "GameNftPatch": {
                "title": "GameNftPatch",
                "type": "object",
                "properties": {
                    "scholarship_id": {
                        "title": "Scholarship Id",
                        "type": "integer"
                    }
                }
            },
            "GameNftTransfer": {
                "title": "GameNftTransfer",
                "required": [
                    "from_address",
                    "to_address",
                    "nft_ids",
                    "token_symbol"
                ],
                "type": "object",
                "properties": {
                    "from_address": {
                        "title": "From Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "to_address": {
                        "title": "To Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "nft_ids": {
                        "title": "Nft Ids",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "token_symbol": {
                        "title": "Token Symbol",
                        "type": "string"
                    }
                }
            },
            "GameNfts": {
                "title": "GameNfts",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameNft"
                        }
                    }
                }
            },
            "GamePatch": {
                "title": "GamePatch",
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/GameStatus"
                    }
                }
            },
            "GameStatus": {
                "title": "GameStatus",
                "enum": [
                    "experimental",
                    "active"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GameStr": {
                "title": "GameStr",
                "enum": [
                    "Axie Infinity",
                    "Pegaxy",
                    "Crypto Unicorns"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GameTotal": {
                "title": "GameTotal",
                "required": [
                    "game_id",
                    "game_name",
                    "total",
                    "raw_total",
                    "token_id",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "total": {
                        "title": "Total",
                        "type": "number"
                    },
                    "raw_total": {
                        "title": "Raw Total",
                        "type": "string"
                    },
                    "token_id": {
                        "title": "Token Id",
                        "type": "integer"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    }
                }
            },
            "Games": {
                "title": "Games",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Game"
                        }
                    }
                }
            },
            "Group": {
                "title": "Group",
                "required": [
                    "id",
                    "title",
                    "guild_id",
                    "game",
                    "game_id",
                    "quota_amount",
                    "quota_token",
                    "date_created",
                    "date_modified",
                    "managers",
                    "group_managers"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game": {
                        "title": "Game",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "quota_amount": {
                        "title": "Quota Amount",
                        "type": "string"
                    },
                    "quota_token": {
                        "title": "Quota Token",
                        "type": "string"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    },
                    "managers": {
                        "title": "Managers",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserLite"
                        }
                    },
                    "group_managers": {
                        "title": "Group Managers",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupManager"
                        }
                    },
                    "payout_config": {
                        "title": "Payout Config",
                        "type": "object"
                    },
                    "group_treasury_account_id": {
                        "title": "Group Treasury Account Id",
                        "type": "integer"
                    },
                    "group_treasury_account": {
                        "$ref": "#/components/schemas/TreasuryAccount"
                    }
                }
            },
            "GroupCreate": {
                "title": "GroupCreate",
                "required": [
                    "title",
                    "guild_id",
                    "game",
                    "quota_token",
                    "quota_amount"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game": {
                        "title": "Game",
                        "type": "string"
                    },
                    "quota_token": {
                        "title": "Quota Token",
                        "type": "string"
                    },
                    "quota_amount": {
                        "title": "Quota Amount",
                        "type": "integer"
                    },
                    "payout_config": {
                        "title": "Payout Config",
                        "type": "object"
                    },
                    "group_treasury_account_id": {
                        "title": "Group Treasury Account Id",
                        "type": "integer"
                    }
                }
            },
            "GroupEarningOut": {
                "title": "GroupEarningOut",
                "required": [
                    "id",
                    "name",
                    "guild_id",
                    "game_id",
                    "game_name",
                    "quota_amount",
                    "raw_quota_amount",
                    "quota_token_id",
                    "quota_token"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "quota_amount": {
                        "title": "Quota Amount",
                        "type": "number"
                    },
                    "raw_quota_amount": {
                        "title": "Raw Quota Amount",
                        "type": "string"
                    },
                    "quota_token_id": {
                        "title": "Quota Token Id",
                        "type": "integer"
                    },
                    "quota_token": {
                        "title": "Quota Token",
                        "type": "string"
                    },
                    "period_from": {
                        "title": "Period From",
                        "type": "string",
                        "format": "date-time"
                    },
                    "period_to": {
                        "title": "Period To",
                        "type": "string",
                        "format": "date-time"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "number"
                    },
                    "raw_amount": {
                        "title": "Raw Amount",
                        "type": "string"
                    }
                }
            },
            "GroupLite": {
                "title": "GroupLite",
                "required": [
                    "id",
                    "title",
                    "guild_id",
                    "game",
                    "game_id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game": {
                        "title": "Game",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    }
                }
            },
            "GroupManager": {
                "title": "GroupManager",
                "required": [
                    "id",
                    "group_id",
                    "user_id",
                    "username",
                    "discord_id",
                    "discord_avatar_hash",
                    "manager_type",
                    "date_created"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "discord_id": {
                        "title": "Discord Id",
                        "type": "string"
                    },
                    "discord_avatar_hash": {
                        "title": "Discord Avatar Hash",
                        "type": "string"
                    },
                    "manager_type": {
                        "$ref": "#/components/schemas/ManagerTypeEnum"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "GroupManagerPatch": {
                "title": "GroupManagerPatch",
                "type": "object",
                "properties": {
                    "manager_type": {
                        "$ref": "#/components/schemas/ManagerTypeEnum"
                    }
                }
            },
            "GroupManagers": {
                "title": "GroupManagers",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupManager"
                        }
                    }
                }
            },
            "GroupPatch": {
                "title": "GroupPatch",
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "quota_token": {
                        "title": "Quota Token",
                        "type": "string"
                    },
                    "quota_amount": {
                        "title": "Quota Amount",
                        "type": "integer"
                    },
                    "payout_config": {
                        "title": "Payout Config",
                        "type": "object"
                    },
                    "group_treasury_account_id": {
                        "title": "Group Treasury Account Id",
                        "type": "integer"
                    }
                }
            },
            "GroupPeriod": {
                "title": "GroupPeriod",
                "enum": [
                    "daily",
                    "weekly",
                    "monthly"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GroupTotalStatsSortByField": {
                "title": "GroupTotalStatsSortByField",
                "enum": [
                    "id",
                    "lifetime_earnings",
                    "average_daily_earnings",
                    "total_members"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "GroupTotalsStatisticOut": {
                "title": "GroupTotalsStatisticOut",
                "required": [
                    "id",
                    "guild_id",
                    "game_id",
                    "game_name",
                    "name",
                    "quota",
                    "raw_quota",
                    "token_id",
                    "token",
                    "lifetime_earnings",
                    "raw_lifetime_earnings",
                    "average_daily_earnings",
                    "raw_average_daily_earnings",
                    "total_members",
                    "rank_metric_name",
                    "average_rank_metric",
                    "max_rank_metric",
                    "role_totals",
                    "managers"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "quota": {
                        "title": "Quota",
                        "type": "number"
                    },
                    "raw_quota": {
                        "title": "Raw Quota",
                        "type": "string"
                    },
                    "token_id": {
                        "title": "Token Id",
                        "type": "integer"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "lifetime_earnings": {
                        "title": "Lifetime Earnings",
                        "type": "number"
                    },
                    "raw_lifetime_earnings": {
                        "title": "Raw Lifetime Earnings",
                        "type": "string"
                    },
                    "average_daily_earnings": {
                        "title": "Average Daily Earnings",
                        "type": "number"
                    },
                    "raw_average_daily_earnings": {
                        "title": "Raw Average Daily Earnings",
                        "type": "string"
                    },
                    "total_members": {
                        "title": "Total Members",
                        "type": "integer"
                    },
                    "rank_metric_name": {
                        "title": "Rank Metric Name",
                        "type": "string"
                    },
                    "average_rank_metric": {
                        "title": "Average Rank Metric",
                        "type": "integer"
                    },
                    "max_rank_metric": {
                        "title": "Max Rank Metric",
                        "type": "integer"
                    },
                    "role_totals": {
                        "title": "Role Totals",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleTotal"
                        }
                    },
                    "managers": {
                        "title": "Managers",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/QuantUserLite"
                        }
                    }
                }
            },
            "GroupTotalsStatisticsOut": {
                "title": "GroupTotalsStatisticsOut",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupTotalsStatisticOut"
                        }
                    }
                }
            },
            "Guild": {
                "title": "Guild",
                "required": [
                    "id",
                    "title",
                    "slug",
                    "guild_state",
                    "date_created",
                    "date_modified"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "slug": {
                        "title": "Slug",
                        "type": "string"
                    },
                    "application_url": {
                        "title": "Application Url",
                        "type": "string"
                    },
                    "self_custody_url": {
                        "title": "Self Custody Url",
                        "type": "string"
                    },
                    "logo_url": {
                        "title": "Logo Url",
                        "type": "string"
                    },
                    "icon_url": {
                        "title": "Icon Url",
                        "type": "string"
                    },
                    "guild_state": {
                        "$ref": "#/components/schemas/GuildState"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    },
                    "admin_data": {
                        "$ref": "#/components/schemas/GuildAdminData"
                    }
                }
            },
            "GuildAdminData": {
                "title": "GuildAdminData",
                "type": "object",
                "properties": {
                    "email": {
                        "title": "Email",
                        "type": "string"
                    }
                },
                "description": "An annex of admin-only data about a guild"
            },
            "GuildCreate": {
                "title": "GuildCreate",
                "required": [
                    "title"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string"
                    },
                    "self_custody_url": {
                        "title": "Self Custody Url",
                        "type": "string"
                    }
                }
            },
            "GuildCreateOut": {
                "title": "GuildCreateOut",
                "required": [
                    "guild",
                    "user_invite"
                ],
                "type": "object",
                "properties": {
                    "guild": {
                        "$ref": "#/components/schemas/Guild"
                    },
                    "user_invite": {
                        "$ref": "#/components/schemas/UserInvite"
                    }
                }
            },
            "GuildEarningOut": {
                "title": "GuildEarningOut",
                "required": [
                    "game_id",
                    "game_name",
                    "token_id",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "token_id": {
                        "title": "Token Id",
                        "type": "integer"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "period_from": {
                        "title": "Period From",
                        "type": "string",
                        "format": "date-time"
                    },
                    "period_to": {
                        "title": "Period To",
                        "type": "string",
                        "format": "date-time"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "number"
                    },
                    "raw_amount": {
                        "title": "Raw Amount",
                        "type": "string"
                    }
                }
            },
            "GuildGame": {
                "title": "GuildGame",
                "required": [
                    "id",
                    "guild_id",
                    "guild_title",
                    "game",
                    "is_active",
                    "enable_gas_management"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "guild_title": {
                        "title": "Guild Title",
                        "type": "string"
                    },
                    "game": {
                        "$ref": "#/components/schemas/Game"
                    },
                    "is_active": {
                        "title": "Is Active",
                        "type": "boolean"
                    },
                    "enable_gas_management": {
                        "title": "Enable Gas Management",
                        "type": "boolean"
                    }
                }
            },
            "GuildGameCreate": {
                "title": "GuildGameCreate",
                "required": [
                    "guild_id",
                    "game_id",
                    "is_active"
                ],
                "type": "object",
                "properties": {
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "is_active": {
                        "title": "Is Active",
                        "type": "boolean"
                    },
                    "enable_gas_management": {
                        "title": "Enable Gas Management",
                        "type": "boolean"
                    }
                }
            },
            "GuildGamePatch": {
                "title": "GuildGamePatch",
                "type": "object",
                "properties": {
                    "is_active": {
                        "title": "Is Active",
                        "type": "boolean"
                    },
                    "enable_gas_management": {
                        "title": "Enable Gas Management",
                        "type": "boolean"
                    }
                }
            },
            "GuildGames": {
                "title": "GuildGames",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GuildGame"
                        }
                    }
                }
            },
            "GuildOverallTotalOut": {
                "title": "GuildOverallTotalOut",
                "required": [
                    "average_daily_earnings",
                    "player_count",
                    "open_scholarships",
                    "assigned_scholarships"
                ],
                "type": "object",
                "properties": {
                    "top_team": {
                        "title": "Top Team",
                        "type": "string"
                    },
                    "average_daily_earnings": {
                        "title": "Average Daily Earnings",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameTotal"
                        }
                    },
                    "player_count": {
                        "title": "Player Count",
                        "type": "integer"
                    },
                    "open_scholarships": {
                        "title": "Open Scholarships",
                        "type": "integer"
                    },
                    "assigned_scholarships": {
                        "title": "Assigned Scholarships",
                        "type": "integer"
                    }
                }
            },
            "GuildPatch": {
                "title": "GuildPatch",
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "email": {
                        "title": "Email",
                        "type": "string"
                    },
                    "application_url": {
                        "title": "Application Url",
                        "type": "string"
                    },
                    "self_custody_url": {
                        "title": "Self Custody Url",
                        "type": "string"
                    },
                    "self_custody_password": {
                        "title": "Self Custody Password",
                        "type": "string",
                        "format": "password",
                        "writeOnly": true
                    },
                    "guild_state": {
                        "$ref": "#/components/schemas/GuildState"
                    }
                }
            },
            "GuildState": {
                "title": "GuildState",
                "enum": [
                    "created",
                    "admin_added",
                    "discord_bot_added",
                    "self_custody_added",
                    "ready"
                ],
                "type": "string",
                "description": "States for the frontend to manage where a guild is.\n    The order of the states is the following, where if a\n    a guild is in state 3, discord_bot_added, then they've\n    completed the states 1 and 2.\n\n    1. created: The guild has been created\n    2. admin_added: The admin users has been added to the guild\n    3. discord_bot_added: The discord bot has been added\n    4. self_custody_added: The self custody node has been added\n    5. ready: Guild is ready to use\n\n    Note that these strings must have a max length of 32 to fit\n    into the database column.\n    "
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "IssuerLogin": {
                "title": "IssuerLogin",
                "required": [
                    "discord_id"
                ],
                "type": "object",
                "properties": {
                    "discord_id": {
                        "title": "Discord Id",
                        "type": "string"
                    }
                }
            },
            "ManagerTypeEnum": {
                "title": "ManagerTypeEnum",
                "enum": [
                    "PAID",
                    "UNPAID"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "NewUserDiscordInfo": {
                "title": "NewUserDiscordInfo",
                "required": [
                    "code",
                    "redirect_uri",
                    "refcode"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "title": "Code",
                        "type": "string"
                    },
                    "redirect_uri": {
                        "title": "Redirect Uri",
                        "type": "string"
                    },
                    "refcode": {
                        "title": "Refcode",
                        "type": "string"
                    }
                }
            },
            "Nft": {
                "title": "Nft",
                "required": [
                    "id",
                    "name",
                    "description",
                    "image",
                    "attributes"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "description": {
                        "title": "Description",
                        "type": "string"
                    },
                    "image": {
                        "title": "Image",
                        "type": "string"
                    },
                    "attributes": {
                        "title": "Attributes",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "OperationalAccount": {
                "title": "OperationalAccount",
                "required": [
                    "public_address",
                    "key_location",
                    "guild_id",
                    "date_created",
                    "date_modified"
                ],
                "type": "object",
                "properties": {
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "key_location": {
                        "title": "Key Location",
                        "type": "string"
                    },
                    "in_use": {
                        "title": "In Use",
                        "type": "boolean",
                        "default": false
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "OperationalAccountCreate": {
                "title": "OperationalAccountCreate",
                "required": [
                    "public_address",
                    "key_location",
                    "guild_id"
                ],
                "type": "object",
                "properties": {
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "key_location": {
                        "title": "Key Location",
                        "type": "string"
                    },
                    "in_use": {
                        "title": "In Use",
                        "type": "boolean",
                        "default": false
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    }
                }
            },
            "OperationalAccountPatch": {
                "title": "OperationalAccountPatch",
                "type": "object",
                "properties": {
                    "key_location": {
                        "title": "Key Location",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    }
                }
            },
            "OrderBy": {
                "title": "OrderBy",
                "enum": [
                    "desc",
                    "asc"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "PasswordLogin": {
                "title": "PasswordLogin",
                "required": [
                    "user_id",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "format": "password",
                        "writeOnly": true
                    }
                }
            },
            "PlayerLoginInfoPerms": {
                "title": "PlayerLoginInfoPerms",
                "enum": [
                    "everything",
                    "qr_code",
                    "none"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "Players": {
                "title": "Players",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserLite"
                        }
                    }
                }
            },
            "QuantUserLite": {
                "title": "QuantUserLite",
                "required": [
                    "id",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    }
                }
            },
            "RoleStr": {
                "title": "RoleStr",
                "enum": [
                    "superuser",
                    "admin",
                    "manager",
                    "player",
                    "issuer",
                    "quant"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "RoleTotal": {
                "title": "RoleTotal",
                "required": [
                    "role",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "title": "Role",
                        "type": "string"
                    },
                    "total": {
                        "title": "Total",
                        "type": "integer"
                    }
                }
            },
            "Scholarship": {
                "title": "Scholarship",
                "required": [
                    "id",
                    "group_id",
                    "title",
                    "status",
                    "is_public",
                    "is_listed",
                    "game_nfts",
                    "group",
                    "player_login_info_perms"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "user_wallet_id": {
                        "title": "User Wallet Id",
                        "type": "integer"
                    },
                    "date_assigned": {
                        "title": "Date Assigned",
                        "type": "string",
                        "format": "date-time"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ScholarshipStatus"
                    },
                    "is_public": {
                        "title": "Is Public",
                        "type": "boolean"
                    },
                    "is_listed": {
                        "title": "Is Listed",
                        "type": "boolean"
                    },
                    "game_account_id": {
                        "title": "Game Account Id",
                        "type": "integer"
                    },
                    "game_nfts": {
                        "title": "Game Nfts",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameNft"
                        }
                    },
                    "user_wallet": {
                        "$ref": "#/components/schemas/UserWallet"
                    },
                    "game_account": {
                        "$ref": "#/components/schemas/GameAccount"
                    },
                    "group": {
                        "$ref": "#/components/schemas/GroupLite"
                    },
                    "supply_state": {
                        "title": "Supply State",
                        "type": "object"
                    },
                    "player_login_info_perms": {
                        "$ref": "#/components/schemas/PlayerLoginInfoPerms"
                    }
                }
            },
            "ScholarshipAction": {
                "title": "ScholarshipAction",
                "required": [
                    "action",
                    "label",
                    "inputs"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "title": "Action",
                        "type": "string"
                    },
                    "label": {
                        "title": "Label",
                        "type": "string"
                    },
                    "inputs": {
                        "title": "Inputs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScholarshipActionInput"
                        }
                    }
                }
            },
            "ScholarshipActionIn": {
                "title": "ScholarshipActionIn",
                "required": [
                    "action",
                    "inputs"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "title": "Action",
                        "type": "string"
                    },
                    "inputs": {
                        "title": "Inputs",
                        "type": "object"
                    }
                }
            },
            "ScholarshipActionInput": {
                "title": "ScholarshipActionInput",
                "required": [
                    "name",
                    "label",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "label": {
                        "title": "Label",
                        "type": "string"
                    },
                    "type": {
                        "title": "Type",
                        "type": "string"
                    }
                }
            },
            "ScholarshipActions": {
                "title": "ScholarshipActions",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScholarshipAction"
                        }
                    }
                }
            },
            "ScholarshipCollect": {
                "title": "ScholarshipCollect",
                "required": [
                    "token",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "amount": {
                        "title": "Amount",
                        "exclusiveMinimum": 0,
                        "type": "integer"
                    }
                }
            },
            "ScholarshipCreate": {
                "title": "ScholarshipCreate",
                "required": [
                    "group_id",
                    "title",
                    "status",
                    "is_public",
                    "is_listed"
                ],
                "type": "object",
                "properties": {
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "user_wallet_id": {
                        "title": "User Wallet Id",
                        "type": "integer"
                    },
                    "date_assigned": {
                        "title": "Date Assigned",
                        "type": "string"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "status": {
                        "title": "Status",
                        "type": "string"
                    },
                    "is_public": {
                        "title": "Is Public",
                        "type": "boolean"
                    },
                    "is_listed": {
                        "title": "Is Listed",
                        "type": "boolean"
                    },
                    "game_account_id": {
                        "title": "Game Account Id",
                        "type": "integer"
                    },
                    "player_login_info_perms": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PlayerLoginInfoPerms"
                            }
                        ],
                        "default": "everything"
                    }
                }
            },
            "ScholarshipEarningOut": {
                "title": "ScholarshipEarningOut",
                "required": [
                    "date",
                    "token_id",
                    "token",
                    "amount",
                    "raw_amount"
                ],
                "type": "object",
                "properties": {
                    "date": {
                        "title": "Date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "token_id": {
                        "title": "Token Id",
                        "type": "integer"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "number"
                    },
                    "raw_amount": {
                        "title": "Raw Amount",
                        "type": "string"
                    }
                }
            },
            "ScholarshipMetricOut": {
                "title": "ScholarshipMetricOut",
                "required": [
                    "date",
                    "name",
                    "raw_value",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "date": {
                        "title": "Date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "raw_value": {
                        "title": "Raw Value",
                        "type": "string"
                    },
                    "value": {
                        "title": "Value",
                        "type": "number"
                    }
                }
            },
            "ScholarshipMmrOut": {
                "title": "ScholarshipMmrOut",
                "required": [
                    "date",
                    "rank",
                    "mmr"
                ],
                "type": "object",
                "properties": {
                    "date": {
                        "title": "Date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "rank": {
                        "title": "Rank",
                        "type": "integer"
                    },
                    "mmr": {
                        "title": "Mmr",
                        "type": "integer"
                    }
                }
            },
            "ScholarshipPatch": {
                "title": "ScholarshipPatch",
                "type": "object",
                "properties": {
                    "group_id": {
                        "title": "Group Id",
                        "type": "integer"
                    },
                    "user_wallet_id": {
                        "title": "User Wallet Id",
                        "type": "integer"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ScholarshipStatus"
                    },
                    "game_account_id": {
                        "title": "Game Account Id",
                        "type": "integer"
                    },
                    "is_public": {
                        "title": "Is Public",
                        "type": "boolean"
                    },
                    "is_listed": {
                        "title": "Is Listed",
                        "type": "boolean"
                    },
                    "player_login_info_perms": {
                        "$ref": "#/components/schemas/PlayerLoginInfoPerms"
                    }
                }
            },
            "ScholarshipStatisticOut": {
                "title": "ScholarshipStatisticOut",
                "required": [
                    "id",
                    "guild_id",
                    "status",
                    "title",
                    "game_id",
                    "game_name",
                    "team_id",
                    "team_name",
                    "quota",
                    "raw_quota",
                    "quota_token_id",
                    "quota_token",
                    "performance",
                    "activity"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "status": {
                        "title": "Status",
                        "type": "string"
                    },
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "team_id": {
                        "title": "Team Id",
                        "type": "integer"
                    },
                    "team_name": {
                        "title": "Team Name",
                        "type": "string"
                    },
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "user_wallet_id": {
                        "title": "User Wallet Id",
                        "type": "integer"
                    },
                    "game_account_id": {
                        "title": "Game Account Id",
                        "type": "integer"
                    },
                    "wallet_address": {
                        "title": "Wallet Address",
                        "type": "string"
                    },
                    "quota": {
                        "title": "Quota",
                        "type": "number"
                    },
                    "raw_quota": {
                        "title": "Raw Quota",
                        "type": "string"
                    },
                    "quota_token_id": {
                        "title": "Quota Token Id",
                        "type": "integer"
                    },
                    "quota_token": {
                        "title": "Quota Token",
                        "type": "string"
                    },
                    "today": {
                        "title": "Today",
                        "type": "number"
                    },
                    "raw_today": {
                        "title": "Raw Today",
                        "type": "string"
                    },
                    "date_assigned": {
                        "title": "Date Assigned",
                        "type": "string",
                        "format": "date-time"
                    },
                    "average": {
                        "title": "Average",
                        "type": "number"
                    },
                    "raw_average": {
                        "title": "Raw Average",
                        "type": "string"
                    },
                    "performance": {
                        "title": "Performance",
                        "type": "integer"
                    },
                    "activity": {
                        "title": "Activity",
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    "raw_activity": {
                        "title": "Raw Activity",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ScholarshipStatisticsOut": {
                "title": "ScholarshipStatisticsOut",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScholarshipStatisticOut"
                        }
                    }
                }
            },
            "ScholarshipStatsSortByField": {
                "title": "ScholarshipStatsSortByField",
                "enum": [
                    "performance",
                    "today",
                    "average",
                    "game",
                    "team",
                    "title",
                    "status",
                    "username",
                    "quota",
                    "date_assigned"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ScholarshipStatus": {
                "title": "ScholarshipStatus",
                "enum": [
                    "draft",
                    "open",
                    "assigned",
                    "inactive",
                    "claiming"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ScholarshipSupply": {
                "title": "ScholarshipSupply",
                "required": [
                    "token",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "amount": {
                        "title": "Amount",
                        "exclusiveMinimum": 0,
                        "type": "integer"
                    }
                }
            },
            "Scholarships": {
                "title": "Scholarships",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Scholarship"
                        }
                    }
                }
            },
            "SelfCustodyClaimOutput": {
                "title": "SelfCustodyClaimOutput",
                "required": [
                    "addr"
                ],
                "type": "object",
                "properties": {
                    "claim_info": {
                        "title": "Claim Info",
                        "type": "object"
                    },
                    "claim": {
                        "title": "Claim",
                        "type": "object"
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/SelfCustodyWeb3Out"
                    },
                    "addr": {
                        "title": "Addr",
                        "type": "string"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "error_msg": {
                        "title": "Error Msg",
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "SelfCustodyWeb3In": {
                "title": "SelfCustodyWeb3In",
                "required": [
                    "contract",
                    "operation",
                    "from_address"
                ],
                "type": "object",
                "properties": {
                    "contract": {
                        "title": "Contract",
                        "type": "string"
                    },
                    "operation": {
                        "title": "Operation",
                        "type": "string"
                    },
                    "inputs": {
                        "title": "Inputs",
                        "type": "object"
                    },
                    "from_address": {
                        "title": "From Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    }
                }
            },
            "SelfCustodyWeb3Input": {
                "title": "SelfCustodyWeb3Input",
                "required": [
                    "contract",
                    "operation"
                ],
                "type": "object",
                "properties": {
                    "contract": {
                        "title": "Contract",
                        "type": "string"
                    },
                    "operation": {
                        "title": "Operation",
                        "type": "string"
                    },
                    "inputs": {
                        "title": "Inputs",
                        "type": "object"
                    }
                },
                "description": "Schema for the web3_input that's sent back\nfrom the self-custody node. This doesn't include the from_address\nthat SelfCustodyWeb3In includes because that's used on a router\nthat requires that from_address."
            },
            "SelfCustodyWeb3Out": {
                "title": "SelfCustodyWeb3Out",
                "type": "object",
                "properties": {
                    "sender": {
                        "title": "Sender",
                        "type": "string"
                    },
                    "transaction_hash": {
                        "title": "Transaction Hash",
                        "type": "string"
                    },
                    "was_successful": {
                        "title": "Was Successful",
                        "type": "boolean"
                    },
                    "block_hash": {
                        "title": "Block Hash",
                        "type": "string"
                    },
                    "block_number": {
                        "title": "Block Number",
                        "type": "string"
                    },
                    "cumulative_gas_used": {
                        "title": "Cumulative Gas Used",
                        "type": "integer"
                    },
                    "transaction_index": {
                        "title": "Transaction Index",
                        "type": "integer"
                    },
                    "to": {
                        "title": "To",
                        "type": "string"
                    },
                    "contract_address": {
                        "title": "Contract Address",
                        "type": "string"
                    },
                    "balance": {
                        "title": "Balance",
                        "type": "integer"
                    },
                    "web3_input": {
                        "$ref": "#/components/schemas/SelfCustodyWeb3Input"
                    },
                    "values": {
                        "title": "Values",
                        "type": "object"
                    },
                    "error_msg": {
                        "title": "Error Msg",
                        "type": "string"
                    }
                }
            },
            "StatsStr": {
                "title": "StatsStr",
                "enum": [
                    "AXIE_SLP",
                    "AXIE_MMR"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "SupplyCollectRecord": {
                "title": "SupplyCollectRecord",
                "required": [
                    "id",
                    "guild_id",
                    "amount",
                    "token",
                    "record_type",
                    "date_created",
                    "previous_state",
                    "current_state",
                    "amount_earned"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "caller_id": {
                        "title": "Caller Id",
                        "type": "integer"
                    },
                    "player_id": {
                        "title": "Player Id",
                        "type": "integer"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "scholarship_id": {
                        "title": "Scholarship Id",
                        "type": "integer"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "string"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "record_type": {
                        "$ref": "#/components/schemas/SupplyCollectRecordType"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "previous_state": {
                        "title": "Previous State",
                        "type": "integer"
                    },
                    "current_state": {
                        "title": "Current State",
                        "type": "integer"
                    },
                    "amount_earned": {
                        "title": "Amount Earned",
                        "type": "integer"
                    }
                }
            },
            "SupplyCollectRecordType": {
                "title": "SupplyCollectRecordType",
                "enum": [
                    "supply",
                    "collect"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "SupplyCollectRecords": {
                "title": "SupplyCollectRecords",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SupplyCollectRecord"
                        }
                    }
                }
            },
            "TransactionLog": {
                "title": "TransactionLog",
                "required": [
                    "id",
                    "username",
                    "guild_id",
                    "transaction_type",
                    "amount",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transaction_type": {
                        "$ref": "#/components/schemas/TransactionTypeStr"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "string"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "from_address": {
                        "title": "From Address",
                        "type": "string"
                    },
                    "to_address": {
                        "title": "To Address",
                        "type": "string"
                    },
                    "transaction_hash": {
                        "title": "Transaction Hash",
                        "type": "string"
                    },
                    "notes": {
                        "title": "Notes",
                        "type": "string"
                    }
                }
            },
            "TransactionLogs": {
                "title": "TransactionLogs",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionLog"
                        }
                    }
                }
            },
            "TransactionSortByField": {
                "title": "TransactionSortByField",
                "enum": [
                    "id",
                    "user_id",
                    "guild_id",
                    "transaction_type",
                    "date_created",
                    "token",
                    "transaction_hash",
                    "from_address",
                    "to_address"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "TransactionTypeStr": {
                "title": "TransactionTypeStr",
                "enum": [
                    "INTERNAL_TRANSFER",
                    "INTERNAL_DEPOSIT",
                    "INTERNAL_WITHDRAW",
                    "PAYOUT",
                    "CLAIM"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "TransferIn": {
                "title": "TransferIn",
                "required": [
                    "from_address",
                    "to_address",
                    "amount",
                    "token_symbol"
                ],
                "type": "object",
                "properties": {
                    "from_address": {
                        "title": "From Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "to_address": {
                        "title": "To Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "integer"
                    },
                    "token_symbol": {
                        "title": "Token Symbol",
                        "type": "string"
                    }
                }
            },
            "TreasuryAccount": {
                "title": "TreasuryAccount",
                "required": [
                    "id",
                    "public_address",
                    "game_id",
                    "date_created",
                    "date_modified",
                    "account_type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "public_address": {
                        "title": "Public Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    },
                    "account_type": {
                        "$ref": "#/components/schemas/AccountEnum"
                    }
                }
            },
            "TreasuryAccountCreate": {
                "title": "TreasuryAccountCreate",
                "required": [
                    "public_address",
                    "game_id",
                    "account_type"
                ],
                "type": "object",
                "properties": {
                    "public_address": {
                        "title": "Public Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "account_type": {
                        "$ref": "#/components/schemas/AccountEnum"
                    }
                }
            },
            "TreasuryAccountSortByField": {
                "title": "TreasuryAccountSortByField",
                "enum": [
                    "id",
                    "guild_id",
                    "game_id",
                    "date_created",
                    "date_modified",
                    "account_type",
                    "token"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "TreasuryAccountWithGroupLite": {
                "title": "TreasuryAccountWithGroupLite",
                "required": [
                    "id",
                    "public_address",
                    "game_id",
                    "date_created",
                    "date_modified",
                    "account_type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "public_address": {
                        "title": "Public Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    },
                    "account_type": {
                        "$ref": "#/components/schemas/AccountEnum"
                    },
                    "group": {
                        "$ref": "#/components/schemas/GroupLite"
                    }
                },
                "description": "TreasuryAccount with Group Lite. This is separate\nfrom TreasuryAccount because the TreasuryAccount without\nGroup Lite is returned with a Group, creating potential\nfor bad, recursive models."
            },
            "TreasuryAccounts": {
                "title": "TreasuryAccounts",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TreasuryAccountWithGroupLite"
                        }
                    }
                }
            },
            "User": {
                "title": "User",
                "required": [
                    "id",
                    "discord_id",
                    "user_roles",
                    "username",
                    "discord_avatar_hash",
                    "guild_id",
                    "enabled",
                    "guild",
                    "user_wallets",
                    "managing_groups",
                    "user_experience",
                    "date_created",
                    "date_modified"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "discord_id": {
                        "title": "Discord Id",
                        "type": "string"
                    },
                    "user_roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleStr"
                        }
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "discord_avatar_hash": {
                        "title": "Discord Avatar Hash",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "enabled": {
                        "title": "Enabled",
                        "type": "boolean"
                    },
                    "guild": {
                        "$ref": "#/components/schemas/Guild"
                    },
                    "user_wallets": {
                        "title": "User Wallets",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserWallet"
                        }
                    },
                    "managing_groups": {
                        "title": "Managing Groups",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GroupLite"
                        }
                    },
                    "user_experience": {
                        "$ref": "#/components/schemas/UserExperience"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserCreate": {
                "title": "UserCreate",
                "required": [
                    "discord_id",
                    "roles",
                    "username",
                    "guild_id"
                ],
                "type": "object",
                "properties": {
                    "discord_id": {
                        "title": "Discord Id",
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleStr"
                        }
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string",
                        "format": "password",
                        "writeOnly": true
                    },
                    "enabled": {
                        "title": "Enabled",
                        "type": "boolean",
                        "default": true
                    }
                }
            },
            "UserEarningOut": {
                "title": "UserEarningOut",
                "required": [
                    "game_id",
                    "game_name",
                    "token_id",
                    "token",
                    "date",
                    "amount",
                    "raw_amount"
                ],
                "type": "object",
                "properties": {
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "token_id": {
                        "title": "Token Id",
                        "type": "integer"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "date": {
                        "title": "Date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "amount": {
                        "title": "Amount",
                        "type": "number"
                    },
                    "raw_amount": {
                        "title": "Raw Amount",
                        "type": "string"
                    }
                }
            },
            "UserExperience": {
                "title": "UserExperience",
                "required": [
                    "user_id",
                    "lifetime_experience",
                    "current_level",
                    "experience_in_current_level",
                    "required_xp_for_next_level"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "lifetime_experience": {
                        "title": "Lifetime Experience",
                        "type": "integer"
                    },
                    "current_level": {
                        "title": "Current Level",
                        "type": "integer"
                    },
                    "experience_in_current_level": {
                        "title": "Experience In Current Level",
                        "type": "integer"
                    },
                    "required_xp_for_next_level": {
                        "title": "Required Xp For Next Level",
                        "type": "integer"
                    }
                }
            },
            "UserExperienceCreate": {
                "title": "UserExperienceCreate",
                "required": [
                    "user_id"
                ],
                "type": "object",
                "properties": {
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "lifetime_experience": {
                        "title": "Lifetime Experience",
                        "type": "integer"
                    }
                }
            },
            "UserExperiencePatch": {
                "title": "UserExperiencePatch",
                "type": "object",
                "properties": {
                    "lifetime_experience": {
                        "title": "Lifetime Experience",
                        "type": "integer"
                    }
                }
            },
            "UserExperiences": {
                "title": "UserExperiences",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserExperience"
                        }
                    }
                }
            },
            "UserInvite": {
                "title": "UserInvite",
                "required": [
                    "id",
                    "guild_id",
                    "initial_role",
                    "refcode",
                    "date_created"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "invited_by": {
                        "title": "Invited By",
                        "type": "integer"
                    },
                    "invited_by_user": {
                        "$ref": "#/components/schemas/UserLite"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "initial_role": {
                        "$ref": "#/components/schemas/RoleStr"
                    },
                    "refcode": {
                        "title": "Refcode",
                        "type": "string"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserInviteCreate": {
                "title": "UserInviteCreate",
                "required": [
                    "guild_id",
                    "initial_role"
                ],
                "type": "object",
                "properties": {
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "initial_role": {
                        "$ref": "#/components/schemas/RoleStr"
                    }
                }
            },
            "UserInvites": {
                "title": "UserInvites",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserInvite"
                        }
                    }
                }
            },
            "UserLite": {
                "title": "UserLite",
                "required": [
                    "id",
                    "username",
                    "guild_id",
                    "discord_id",
                    "discord_avatar_hash",
                    "date_created"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "discord_id": {
                        "title": "Discord Id",
                        "type": "string"
                    },
                    "discord_avatar_hash": {
                        "title": "Discord Avatar Hash",
                        "type": "string"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserLiteWithRolesAndWallets": {
                "title": "UserLiteWithRolesAndWallets",
                "required": [
                    "id",
                    "username",
                    "guild_id",
                    "discord_id",
                    "discord_avatar_hash",
                    "date_created",
                    "user_roles",
                    "user_wallets"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "guild_id": {
                        "title": "Guild Id",
                        "type": "integer"
                    },
                    "discord_id": {
                        "title": "Discord Id",
                        "type": "string"
                    },
                    "discord_avatar_hash": {
                        "title": "Discord Avatar Hash",
                        "type": "string"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleStr"
                        }
                    },
                    "user_wallets": {
                        "title": "User Wallets",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserWallet"
                        }
                    }
                }
            },
            "UserMmrOut": {
                "title": "UserMmrOut",
                "required": [
                    "game_id",
                    "game_name",
                    "scholarship_id",
                    "scholarship_title",
                    "date"
                ],
                "type": "object",
                "properties": {
                    "game_id": {
                        "title": "Game Id",
                        "type": "integer"
                    },
                    "game_name": {
                        "title": "Game Name",
                        "type": "string"
                    },
                    "scholarship_id": {
                        "title": "Scholarship Id",
                        "type": "integer"
                    },
                    "scholarship_title": {
                        "title": "Scholarship Title",
                        "type": "string"
                    },
                    "date": {
                        "title": "Date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "rank": {
                        "title": "Rank",
                        "type": "integer"
                    },
                    "mmr": {
                        "title": "Mmr",
                        "type": "integer"
                    }
                }
            },
            "UserPatch": {
                "title": "UserPatch",
                "type": "object",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleStr"
                        }
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "enabled": {
                        "title": "Enabled",
                        "type": "boolean"
                    }
                }
            },
            "UserReward": {
                "title": "UserReward",
                "required": [
                    "id",
                    "user_id",
                    "token",
                    "balance",
                    "min_withdrawal_amount",
                    "date_created",
                    "date_modified"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "token": {
                        "title": "Token",
                        "type": "string"
                    },
                    "balance": {
                        "title": "Balance",
                        "type": "string"
                    },
                    "min_withdrawal_amount": {
                        "title": "Min Withdrawal Amount",
                        "type": "string"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserRewardCreate": {
                "title": "UserRewardCreate",
                "required": [
                    "token"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "title": "Token",
                        "type": "string"
                    }
                }
            },
            "UserRewardDeposit": {
                "title": "UserRewardDeposit",
                "required": [
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "amount": {
                        "title": "Amount",
                        "exclusiveMinimum": 0,
                        "type": "integer"
                    }
                }
            },
            "UserRewardSyncIn": {
                "title": "UserRewardSyncIn",
                "required": [
                    "start_time",
                    "end_time"
                ],
                "type": "object",
                "properties": {
                    "start_time": {
                        "title": "Start Time",
                        "type": "string"
                    },
                    "end_time": {
                        "title": "End Time",
                        "type": "string"
                    }
                }
            },
            "UserRewardSyncOut": {
                "title": "UserRewardSyncOut",
                "required": [
                    "payout",
                    "amount_earned"
                ],
                "type": "object",
                "properties": {
                    "payout": {
                        "title": "Payout",
                        "type": "object"
                    },
                    "amount_earned": {
                        "title": "Amount Earned",
                        "type": "integer"
                    }
                }
            },
            "UserRewardWithdrawal": {
                "title": "UserRewardWithdrawal",
                "required": [
                    "address",
                    "amount"
                ],
                "type": "object",
                "properties": {
                    "address": {
                        "title": "Address",
                        "maxLength": 42,
                        "minLength": 42,
                        "type": "string"
                    },
                    "amount": {
                        "title": "Amount",
                        "exclusiveMinimum": 0,
                        "type": "integer"
                    }
                }
            },
            "UserTotalsOut": {
                "title": "UserTotalsOut",
                "required": [
                    "scholarships_assigned",
                    "lifetime",
                    "averages"
                ],
                "type": "object",
                "properties": {
                    "scholarships_assigned": {
                        "title": "Scholarships Assigned",
                        "type": "integer"
                    },
                    "lifetime": {
                        "title": "Lifetime",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameTotal"
                        }
                    },
                    "averages": {
                        "title": "Averages",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameTotal"
                        }
                    }
                }
            },
            "UserWallet": {
                "title": "UserWallet",
                "required": [
                    "id",
                    "user_id",
                    "public_address",
                    "chain_id",
                    "date_created",
                    "date_modified"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Id",
                        "type": "integer"
                    },
                    "user_id": {
                        "title": "User Id",
                        "type": "integer"
                    },
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "chain_id": {
                        "title": "Chain Id",
                        "type": "integer"
                    },
                    "date_created": {
                        "title": "Date Created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "date_modified": {
                        "title": "Date Modified",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "UserWalletCreate": {
                "title": "UserWalletCreate",
                "required": [
                    "public_address",
                    "chain_id"
                ],
                "type": "object",
                "properties": {
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "chain_id": {
                        "title": "Chain Id",
                        "type": "integer"
                    }
                }
            },
            "UserWalletPatch": {
                "title": "UserWalletPatch",
                "type": "object",
                "properties": {
                    "public_address": {
                        "title": "Public Address",
                        "type": "string"
                    },
                    "chain_id": {
                        "title": "Chain Id",
                        "type": "integer"
                    }
                }
            },
            "Users": {
                "title": "Users",
                "required": [
                    "count",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "title": "Count",
                        "type": "integer"
                    },
                    "values": {
                        "title": "Values",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserLiteWithRolesAndWallets"
                        }
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            },
            "APIKeyHeader": {
                "type": "apiKey",
                "in": "header",
                "name": "api-key"
            }
        }
    }
}